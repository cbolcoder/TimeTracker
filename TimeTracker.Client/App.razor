@inject IProjectService ProjectService
@inject AuthenticationStateProvider AuthStateProvider
@implements IDisposable

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    <h3>Authorization Denied - </h3>
                    You are trying to reach a secured resource!<br /><br />
                    Please <a href="/login">log in</a> or <a href="/register">register</a> first.
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    protected override void OnInitialized()
    {
        AuthStateProvider.AuthenticationStateChanged += OnAuthStateChanged;
    }

    public async void OnAuthStateChanged(Task<AuthenticationState> task)
    {
        var state = await task;
        if(state != null && state.User.Identity!.IsAuthenticated)
        {
            await ProjectService.LoadAllProjects();
        }
    }

    public void Dispose()
    {
        AuthStateProvider.AuthenticationStateChanged -= OnAuthStateChanged;
    }
}