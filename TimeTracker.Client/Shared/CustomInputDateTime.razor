@using System.Diagnostics.CodeAnalysis
@using System.Linq.Expressions
@inherits InputBase<DateTime>

<div>
    @if (!string.IsNullOrWhiteSpace(Label))
    {
        <label for="@Id" class="block font-medium text-gray-700 mt-2">@Label</label>
    }
    <input type="@Type" id="@Id" @bind="@CurrentValueAsString"
           class="mt-1 p-2 w-full rounded-md border-gray-200 shadow-sm" />
    <ValidationMessage For="@ValidationFor" class="text-sm text-red-600 font-extrabold my-1" />
</div>

@code {
    [Parameter]
    public string? Id { get; set; }
    [Parameter]
    public string? Label { get; set; }
    [Parameter]
    public string? Type { get; set; } = "datetime-local";
    [Parameter]
    public Expression<Func<DateTime>> ValidationFor { get; set; } = default!;

    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out DateTime result, [NotNullWhen(false)] out string validationErrorMessage)
    {
        if (DateTime.TryParse(value, out result))
        {
            validationErrorMessage = string.Empty;
            return true;
        }

        validationErrorMessage = $"{FieldIdentifier.FieldName} is not a valid date.";
        return false;
    }

    protected override string FormatValueAsString(DateTime value)
    {
        return value.ToString("yyyy-MM-ddTHH:mm");
    }
}
