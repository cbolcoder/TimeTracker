@page "/timeentry"
@page "/timeentry/{id:int}"
@inject IProjectService ProjectService
@inject ITimeEntryService TimeEntryService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable
@attribute [Authorize]

@if (Id == null)
{
    <PageTitle>Create Time Entry</PageTitle>
    <h3>Create Time Entry</h3>
}
else
{
    <PageTitle>Edit Time Entry Id: @Id</PageTitle>
    <h3>Edit Time Entry Id: @Id</h3>
}

<EditForm Model="timeEntry" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <CustomInputDateTime Id="startDate" Label="Start"
                         @bind-Value="timeEntry.Start" ValidationFor="() => timeEntry.Start" />

    <CustomInputDateTimeNullable Id="endDate" Label="End"
                                 @bind-Value="timeEntry.End" ValidationFor="() => timeEntry.End" />

    <CustomInputSelect Id="project" Label="Project"
                       @bind-Value="timeEntry.ProjectId" ValidationFor="() => timeEntry.ProjectId"
                       Items="ProjectService.Projects
                            .Select(p => new CustomInputSelect.SelectListItem {
                                Value = p.Id.ToString(), DisplayName = p.Name })" />
    <div class="flex gap-4">
        <CustomButton Text="Submit" Type="submit" AddMarginTop />
        @if (Id is not null)
        {
            <CustomButton Text="Delete" Level="CustomButton.ButtonLevel.Delete" AddMarginTop OnClick="DeleteTimeEntry" />
        }
    </div>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    TimeEntryRequest timeEntry = new TimeEntryRequest();

    protected override void OnInitialized()
    {
        ProjectService.OnChange += StateHasChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            var result = await TimeEntryService.GetTimeEntryById((int)Id);
            timeEntry = new TimeEntryRequest
                {
                    ProjectId = result.Project.Id,
                    Start = result.Start,
                    End = result.End
                };
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await TimeEntryService.CreateTimeEntry(timeEntry);
            NavigationManager.NavigateTo("/timeentries");
        }
        else
        {
            await TimeEntryService.UpdateTimeEntry((int)Id, timeEntry);
            NavigationManager.NavigateTo("/timeentries");
        }
    }

    async Task DeleteTimeEntry()
    {
        var confirmed = await JSRuntime
            .InvokeAsync<bool>("confirm", "Do you want to delete this time entry?");

        if (Id != null && confirmed)
        {
            await TimeEntryService.DeleteTimeEntry((int)Id);
            NavigationManager.NavigateTo("/timeentries");
        }
    }

    public void Dispose()
    {
        ProjectService.OnChange -= StateHasChanged;
    }
}
