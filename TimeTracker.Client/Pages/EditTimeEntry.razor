@page "/timeentry"
@page "/timeentry/{id:int}"
@inject IProjectService ProjectService
@inject ITimeEntryService TimeEntryService
@inject NavigationManager NavigationManager
@implements IDisposable

@if (Id is null)
{
     <h3>Create Time Entry</h3>
}
else
{
    <h3>Edit Time Entry Id: @Id</h3>
}

<EditForm Model="timeEntry" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <div>
        <label for="startDate">Start</label>
        <InputDate id="startDate" Type="InputDateType.DateTimeLocal"
                   @bind-Value="timeEntry.Start" class="form-control" />
    </div>
    <div>
        <label for="endDate">End</label>
        <InputDate id="endDate" Type="InputDateType.DateTimeLocal"
                   @bind-Value="timeEntry.End" class="form-control" />
    </div>
    <div>
        <label for="project">Project</label>
        <InputSelect id="project" @bind-Value="timeEntry.ProjectId" class="form-control">
            @foreach (var project in ProjectService.Projects)
            {
                <option value="@project.Id">@project.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="() => timeEntry.ProjectId" />
    </div>
    <button type="submit" class="btn btn-primary mt-4">Submit</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    TimeEntryRequest timeEntry = new TimeEntryRequest();

    protected override void OnInitialized()
    {
        ProjectService.OnChange += StateHasChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            var result = await TimeEntryService.GetTimeEntryById((int)Id);
            timeEntry = new TimeEntryRequest
                {
                    ProjectId = result.Project.Id,
                    Start = result.Start,
                    End = result.End
                };
        }
    }

    async Task HandleSubmit()
    {
        if (Id is null)
        {
            await TimeEntryService.CreateTimeEntry(timeEntry);
            NavigationManager.NavigateTo("/timeentries");
        }
        else
        {
            await TimeEntryService.UpdateTimeEntry((int)Id, timeEntry);
            NavigationManager.NavigateTo("/timeentries");
        }
    }

    public void Dispose()
    {
        ProjectService.OnChange -= StateHasChanged;
    }
}
