@page "/project"
@page "/project/{id:int}"
@using Mapster
@inject IProjectService ProjectService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@attribute [Authorize]

@if (Id == null)
{
    <PageTitle>Create a new Project</PageTitle>
    <h3>Create a new Project</h3>
}
else
{
    <PageTitle>Edit Project: @project.Name</PageTitle>
    <h3>Edit Project: @project.Name</h3>
}

<EditForm Model="project" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <CustomInputText Id="name"
                     Label="Name"
                     @bind-Value="project.Name"
                     ValidationFor="() => project.Name" />
    <CustomInputTextArea Id="description"
                         Label="Description"
                         @bind-Value="project.Description"
                         ValidationFor="() => project.Description" />
    <CustomInputDateNullable Id="startDate"
                             Label="Start Date"
                             @bind-Value="project.StartDate"
                             ValidationFor="() => project.StartDate" />
    <CustomInputDateNullable Id="endDate"
                             Label="End Date"
                             @bind-Value="project.EndDate"
                             ValidationFor="() => project.EndDate" />
    <div class="flex gap-4">
        <CustomButton Text="Submit" Type="submit" AddMarginTop />
        @if (Id is not null)
        {
            <CustomButton Text="Delete" Level="CustomButton.ButtonLevel.Delete" AddMarginTop OnClick="DeleteProject" />
        }
    </div>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    ProjectRequest project = new ProjectRequest { Name = string.Empty };

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            var result = await ProjectService.GetProjectById((int)Id);
            project = result.Adapt<ProjectRequest>();
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await ProjectService.CreateProject(project);
            NavigationManager.NavigateTo("/projects");
        }
        else
        {
            await ProjectService.UpdateProject((int)Id, project);
            NavigationManager.NavigateTo("/projects");

        }
    }

    async Task DeleteProject()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Do you want to delete this project?");

        if (Id != null && confirmed)
        {
            await ProjectService.DeleteProject((int)Id);
            NavigationManager.NavigateTo("/projects");
        }
    }
}
